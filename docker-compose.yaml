volumes:
  pg_analytic:
  pg_banned:
  pg_post:
  pg_users:
  zk_data:
  kafka_data:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - 2181:2181
    volumes:
      - zk_data:/var/lib/zookeeper/data
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc -w 2 zookeeper 2181"]
      interval: 5s
      timeout: 10s
      retries: 5
  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 9092:9092
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: CONTROLLER://kafka:29092,HOST://localhost:9092
      KAFKA_LISTENERS: CONTROLLER://0.0.0.0:29092,HOST://0.0.0.0:9092
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:29092" ]
      interval: 10s
      timeout: 20s
      retries: 15
  analytic-db:
    image: postgres
    container_name: analytic-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=analytic-post-service
    volumes:
      - pg_analytic:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
  banned-words-db:
    image: postgres
    container_name: banned-words-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: banned-words-service
    volumes:
      - pg_banned:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
  post-db:
    image: postgres
    container_name: post-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: post-service
    volumes:
      - pg_post:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
  users-db:
    image: postgres
    container_name: users-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: users-service
    volumes:
      - pg_users:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  config-service:
    build:
      context: ./config-service
    container_name: config-service
    ports:
      - "8888:8888"
    environment:
      SPRING_APPLICATION_NAME: config-service
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8888 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10

  eureka-service:
    build:
      context: ./eureka-service
    container_name: eureka-service
    ports:
      - "8761:8761"
    environment:
      SPRING_APPLICATION_NAME: eureka-service
      SPRING_CLOUD_CONFIG_URI: http://config-service:8888
      SPRING_CONFIG_IMPORT: configserver:http://config-service:8888
      SPRING_CLOUD_CONFIG_FAIL_FAST: "true"
      EUREKA_INSTANCE_HOSTNAME: eureka-service
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 8761 || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      config-service:
        condition: service_healthy

  gateway-service:
    build:
      context: ./gateway-service
    container_name: gateway-service
    ports:
      - "8080:8080"
    environment:
      SPRING_APPLICATION_NAME: gateway-service
      SPRING_CLOUD_CONFIG_URI: http://config-service:8888
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-service:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: gateway-service
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 8080 || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service:
        condition: service_healthy

  users-service:
    build:
      context: ./users-service
    container_name: users-service
    ports:
      - "8181:8181"
    environment:
      SPRING_APPLICATION_NAME: users-service
      SPRING_CLOUD_CONFIG_URI: http://config-service:8888
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-service:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: users-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://users-db:5432/users-service
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      users-db:
        condition: service_healthy

  banned-words-service:
    build:
      context: ./banned-words-service
    container_name: banned-words-service
    ports:
      - "8182:8182"
    environment:
      SPRING_APPLICATION_NAME: banned-words-service
      SPRING_CLOUD_CONFIG_URI: http://config-service:8888
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-service:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: banned-words-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://banned-words-db:5432/banned-words-service
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      banned-words-db:
        condition: service_healthy

  post-service:
    build:
      context: ./post-service
    container_name: post-service
    ports:
      - "8183:8183"
    environment:
      SPRING_APPLICATION_NAME: post-service
      SPRING_CLOUD_CONFIG_URI: http://config-service:8888
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-service:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: post-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://post-db:5432/post-service
      POST_LENGTH: "1000"
      JWT_SECRET: this-is-very-strong-secret-key-with-32-bytes-long
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      post-db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  analytic-post-service:
    build:
      context: ./analytic-post-service
    container_name: analytic-post-service
    ports:
      - "8184:8184"
    environment:
      SPRING_APPLICATION_NAME: analytic-post-service
      SPRING_CLOUD_CONFIG_URI: http://config-service:8888
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-service:8761/eureka
      EUREKA_INSTANCE_HOSTNAME: analytic-post-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://analytic-db:5432/analytic-post-service
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      analytic-db:
        condition: service_healthy
      kafka:
        condition: service_healthy